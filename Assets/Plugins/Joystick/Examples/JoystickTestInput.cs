//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Plugins/Joystick/Examples/JoystickTestInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @JoystickTestInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @JoystickTestInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""JoystickTestInput"",
    ""maps"": [
        {
            ""name"": ""JoystickTest"",
            ""id"": ""a72eeb51-3989-4229-b7a4-3eebafb3cda6"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""74d74050-4422-4dc6-8d0a-62a139084424"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""ca5b623e-368b-4f9f-a1f3-e29f80365126"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e12ef959-81f2-47f9-ab64-3fe7d866d6e3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""da4c631e-0e85-4045-8832-0591c6b9053d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e34bbd82-4856-4443-976d-a7b24817d6c8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""68d38e41-b107-4a6b-9ea0-84660f21d622"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""720b0a62-11aa-4956-bcaa-9d0472be80e1"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // JoystickTest
        m_JoystickTest = asset.FindActionMap("JoystickTest", throwIfNotFound: true);
        m_JoystickTest_Movement = m_JoystickTest.FindAction("Movement", throwIfNotFound: true);
    }

    ~@JoystickTestInput()
    {
        UnityEngine.Debug.Assert(!m_JoystickTest.enabled, "This will cause a leak and performance issues, JoystickTestInput.JoystickTest.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // JoystickTest
    private readonly InputActionMap m_JoystickTest;
    private List<IJoystickTestActions> m_JoystickTestActionsCallbackInterfaces = new List<IJoystickTestActions>();
    private readonly InputAction m_JoystickTest_Movement;
    public struct JoystickTestActions
    {
        private @JoystickTestInput m_Wrapper;
        public JoystickTestActions(@JoystickTestInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_JoystickTest_Movement;
        public InputActionMap Get() { return m_Wrapper.m_JoystickTest; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JoystickTestActions set) { return set.Get(); }
        public void AddCallbacks(IJoystickTestActions instance)
        {
            if (instance == null || m_Wrapper.m_JoystickTestActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JoystickTestActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IJoystickTestActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IJoystickTestActions instance)
        {
            if (m_Wrapper.m_JoystickTestActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJoystickTestActions instance)
        {
            foreach (var item in m_Wrapper.m_JoystickTestActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JoystickTestActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JoystickTestActions @JoystickTest => new JoystickTestActions(this);
    public interface IJoystickTestActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
